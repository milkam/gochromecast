// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: pkg/domain/chromecast/proto/logging.proto

package logging

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_EVENT_TYPE_UNKNOWN           EventType = 0
	EventType_CAST_SOCKET_CREATED          EventType = 1
	EventType_READY_STATE_CHANGED          EventType = 2
	EventType_CONNECTION_STATE_CHANGED     EventType = 3
	EventType_READ_STATE_CHANGED           EventType = 4
	EventType_WRITE_STATE_CHANGED          EventType = 5
	EventType_ERROR_STATE_CHANGED          EventType = 6
	EventType_CONNECT_FAILED               EventType = 7
	EventType_TCP_SOCKET_CONNECT           EventType = 8 // Logged with RV.
	EventType_TCP_SOCKET_SET_KEEP_ALIVE    EventType = 9
	EventType_SSL_CERT_WHITELISTED         EventType = 10
	EventType_SSL_SOCKET_CONNECT           EventType = 11 // Logged with RV.
	EventType_SSL_INFO_OBTAINED            EventType = 12
	EventType_DER_ENCODED_CERT_OBTAIN      EventType = 13 // Logged with RV.
	EventType_RECEIVED_CHALLENGE_REPLY     EventType = 14
	EventType_AUTH_CHALLENGE_REPLY         EventType = 15
	EventType_CONNECT_TIMED_OUT            EventType = 16
	EventType_SEND_MESSAGE_FAILED          EventType = 17
	EventType_MESSAGE_ENQUEUED             EventType = 18 // Message
	EventType_SOCKET_WRITE                 EventType = 19 // Logged with RV.
	EventType_MESSAGE_WRITTEN              EventType = 20 // Message
	EventType_SOCKET_READ                  EventType = 21 // Logged with RV.
	EventType_MESSAGE_READ                 EventType = 22 // Message
	EventType_SOCKET_CLOSED                EventType = 25
	EventType_SSL_CERT_EXCESSIVE_LIFETIME  EventType = 26
	EventType_CHANNEL_POLICY_ENFORCED      EventType = 27
	EventType_TCP_SOCKET_CONNECT_COMPLETE  EventType = 28 // Logged with RV.
	EventType_SSL_SOCKET_CONNECT_COMPLETE  EventType = 29 // Logged with RV.
	EventType_SSL_SOCKET_CONNECT_FAILED    EventType = 30 // Logged with RV.
	EventType_SEND_AUTH_CHALLENGE_FAILED   EventType = 31 // Logged with RV.
	EventType_AUTH_CHALLENGE_REPLY_INVALID EventType = 32
	EventType_PING_WRITE_ERROR             EventType = 33 // Logged with RV.
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "EVENT_TYPE_UNKNOWN",
		1:  "CAST_SOCKET_CREATED",
		2:  "READY_STATE_CHANGED",
		3:  "CONNECTION_STATE_CHANGED",
		4:  "READ_STATE_CHANGED",
		5:  "WRITE_STATE_CHANGED",
		6:  "ERROR_STATE_CHANGED",
		7:  "CONNECT_FAILED",
		8:  "TCP_SOCKET_CONNECT",
		9:  "TCP_SOCKET_SET_KEEP_ALIVE",
		10: "SSL_CERT_WHITELISTED",
		11: "SSL_SOCKET_CONNECT",
		12: "SSL_INFO_OBTAINED",
		13: "DER_ENCODED_CERT_OBTAIN",
		14: "RECEIVED_CHALLENGE_REPLY",
		15: "AUTH_CHALLENGE_REPLY",
		16: "CONNECT_TIMED_OUT",
		17: "SEND_MESSAGE_FAILED",
		18: "MESSAGE_ENQUEUED",
		19: "SOCKET_WRITE",
		20: "MESSAGE_WRITTEN",
		21: "SOCKET_READ",
		22: "MESSAGE_READ",
		25: "SOCKET_CLOSED",
		26: "SSL_CERT_EXCESSIVE_LIFETIME",
		27: "CHANNEL_POLICY_ENFORCED",
		28: "TCP_SOCKET_CONNECT_COMPLETE",
		29: "SSL_SOCKET_CONNECT_COMPLETE",
		30: "SSL_SOCKET_CONNECT_FAILED",
		31: "SEND_AUTH_CHALLENGE_FAILED",
		32: "AUTH_CHALLENGE_REPLY_INVALID",
		33: "PING_WRITE_ERROR",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNKNOWN":           0,
		"CAST_SOCKET_CREATED":          1,
		"READY_STATE_CHANGED":          2,
		"CONNECTION_STATE_CHANGED":     3,
		"READ_STATE_CHANGED":           4,
		"WRITE_STATE_CHANGED":          5,
		"ERROR_STATE_CHANGED":          6,
		"CONNECT_FAILED":               7,
		"TCP_SOCKET_CONNECT":           8,
		"TCP_SOCKET_SET_KEEP_ALIVE":    9,
		"SSL_CERT_WHITELISTED":         10,
		"SSL_SOCKET_CONNECT":           11,
		"SSL_INFO_OBTAINED":            12,
		"DER_ENCODED_CERT_OBTAIN":      13,
		"RECEIVED_CHALLENGE_REPLY":     14,
		"AUTH_CHALLENGE_REPLY":         15,
		"CONNECT_TIMED_OUT":            16,
		"SEND_MESSAGE_FAILED":          17,
		"MESSAGE_ENQUEUED":             18,
		"SOCKET_WRITE":                 19,
		"MESSAGE_WRITTEN":              20,
		"SOCKET_READ":                  21,
		"MESSAGE_READ":                 22,
		"SOCKET_CLOSED":                25,
		"SSL_CERT_EXCESSIVE_LIFETIME":  26,
		"CHANNEL_POLICY_ENFORCED":      27,
		"TCP_SOCKET_CONNECT_COMPLETE":  28,
		"SSL_SOCKET_CONNECT_COMPLETE":  29,
		"SSL_SOCKET_CONNECT_FAILED":    30,
		"SEND_AUTH_CHALLENGE_FAILED":   31,
		"AUTH_CHALLENGE_REPLY_INVALID": 32,
		"PING_WRITE_ERROR":             33,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_domain_chromecast_proto_logging_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_pkg_domain_chromecast_proto_logging_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EventType(num)
	return nil
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_domain_chromecast_proto_logging_proto_rawDescGZIP(), []int{0}
}

type ChannelAuth int32

const (
	// SSL over TCP.
	ChannelAuth_SSL ChannelAuth = 1
	// SSL over TCP with challenge and receiver signature verification.
	ChannelAuth_SSL_VERIFIED ChannelAuth = 2
)

// Enum value maps for ChannelAuth.
var (
	ChannelAuth_name = map[int32]string{
		1: "SSL",
		2: "SSL_VERIFIED",
	}
	ChannelAuth_value = map[string]int32{
		"SSL":          1,
		"SSL_VERIFIED": 2,
	}
)

func (x ChannelAuth) Enum() *ChannelAuth {
	p := new(ChannelAuth)
	*p = x
	return p
}

func (x ChannelAuth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelAuth) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_domain_chromecast_proto_logging_proto_enumTypes[1].Descriptor()
}

func (ChannelAuth) Type() protoreflect.EnumType {
	return &file_pkg_domain_chromecast_proto_logging_proto_enumTypes[1]
}

func (x ChannelAuth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChannelAuth) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChannelAuth(num)
	return nil
}

// Deprecated: Use ChannelAuth.Descriptor instead.
func (ChannelAuth) EnumDescriptor() ([]byte, []int) {
	return file_pkg_domain_chromecast_proto_logging_proto_rawDescGZIP(), []int{1}
}

type ReadyState int32

const (
	ReadyState_READY_STATE_NONE       ReadyState = 1
	ReadyState_READY_STATE_CONNECTING ReadyState = 2
	ReadyState_READY_STATE_OPEN       ReadyState = 3
	ReadyState_READY_STATE_CLOSING    ReadyState = 4
	ReadyState_READY_STATE_CLOSED     ReadyState = 5
)

// Enum value maps for ReadyState.
var (
	ReadyState_name = map[int32]string{
		1: "READY_STATE_NONE",
		2: "READY_STATE_CONNECTING",
		3: "READY_STATE_OPEN",
		4: "READY_STATE_CLOSING",
		5: "READY_STATE_CLOSED",
	}
	ReadyState_value = map[string]int32{
		"READY_STATE_NONE":       1,
		"READY_STATE_CONNECTING": 2,
		"READY_STATE_OPEN":       3,
		"READY_STATE_CLOSING":    4,
		"READY_STATE_CLOSED":     5,
	}
)

func (x ReadyState) Enum() *ReadyState {
	p := new(ReadyState)
	*p = x
	return p
}

func (x ReadyState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadyState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_domain_chromecast_proto_logging_proto_enumTypes[2].Descriptor()
}

func (ReadyState) Type() protoreflect.EnumType {
	return &file_pkg_domain_chromecast_proto_logging_proto_enumTypes[2]
}

func (x ReadyState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReadyState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReadyState(num)
	return nil
}

// Deprecated: Use ReadyState.Descriptor instead.
func (ReadyState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_domain_chromecast_proto_logging_proto_rawDescGZIP(), []int{2}
}

type ConnectionState int32

const (
	ConnectionState_CONN_STATE_UNKNOWN                       ConnectionState = 1
	ConnectionState_CONN_STATE_TCP_CONNECT                   ConnectionState = 2
	ConnectionState_CONN_STATE_TCP_CONNECT_COMPLETE          ConnectionState = 3
	ConnectionState_CONN_STATE_SSL_CONNECT                   ConnectionState = 4
	ConnectionState_CONN_STATE_SSL_CONNECT_COMPLETE          ConnectionState = 5
	ConnectionState_CONN_STATE_AUTH_CHALLENGE_SEND           ConnectionState = 6
	ConnectionState_CONN_STATE_AUTH_CHALLENGE_SEND_COMPLETE  ConnectionState = 7
	ConnectionState_CONN_STATE_AUTH_CHALLENGE_REPLY_COMPLETE ConnectionState = 8
	ConnectionState_CONN_STATE_START_CONNECT                 ConnectionState = 9
	// Terminal states follow.
	ConnectionState_CONN_STATE_FINISHED ConnectionState = 100
	ConnectionState_CONN_STATE_ERROR    ConnectionState = 101
	ConnectionState_CONN_STATE_TIMEOUT  ConnectionState = 102
)

// Enum value maps for ConnectionState.
var (
	ConnectionState_name = map[int32]string{
		1:   "CONN_STATE_UNKNOWN",
		2:   "CONN_STATE_TCP_CONNECT",
		3:   "CONN_STATE_TCP_CONNECT_COMPLETE",
		4:   "CONN_STATE_SSL_CONNECT",
		5:   "CONN_STATE_SSL_CONNECT_COMPLETE",
		6:   "CONN_STATE_AUTH_CHALLENGE_SEND",
		7:   "CONN_STATE_AUTH_CHALLENGE_SEND_COMPLETE",
		8:   "CONN_STATE_AUTH_CHALLENGE_REPLY_COMPLETE",
		9:   "CONN_STATE_START_CONNECT",
		100: "CONN_STATE_FINISHED",
		101: "CONN_STATE_ERROR",
		102: "CONN_STATE_TIMEOUT",
	}
	ConnectionState_value = map[string]int32{
		"CONN_STATE_UNKNOWN":                       1,
		"CONN_STATE_TCP_CONNECT":                   2,
		"CONN_STATE_TCP_CONNECT_COMPLETE":          3,
		"CONN_STATE_SSL_CONNECT":                   4,
		"CONN_STATE_SSL_CONNECT_COMPLETE":          5,
		"CONN_STATE_AUTH_CHALLENGE_SEND":           6,
		"CONN_STATE_AUTH_CHALLENGE_SEND_COMPLETE":  7,
		"CONN_STATE_AUTH_CHALLENGE_REPLY_COMPLETE": 8,
		"CONN_STATE_START_CONNECT":                 9,
		"CONN_STATE_FINISHED":                      100,
		"CONN_STATE_ERROR":                         101,
		"CONN_STATE_TIMEOUT":                       102,
	}
)

func (x ConnectionState) Enum() *ConnectionState {
	p := new(ConnectionState)
	*p = x
	return p
}

func (x ConnectionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_domain_chromecast_proto_logging_proto_enumTypes[3].Descriptor()
}

func (ConnectionState) Type() protoreflect.EnumType {
	return &file_pkg_domain_chromecast_proto_logging_proto_enumTypes[3]
}

func (x ConnectionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConnectionState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConnectionState(num)
	return nil
}

// Deprecated: Use ConnectionState.Descriptor instead.
func (ConnectionState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_domain_chromecast_proto_logging_proto_rawDescGZIP(), []int{3}
}

type ReadState int32

const (
	ReadState_READ_STATE_UNKNOWN       ReadState = 1
	ReadState_READ_STATE_READ          ReadState = 2
	ReadState_READ_STATE_READ_COMPLETE ReadState = 3
	ReadState_READ_STATE_DO_CALLBACK   ReadState = 4
	ReadState_READ_STATE_HANDLE_ERROR  ReadState = 5
	ReadState_READ_STATE_ERROR         ReadState = 100 // Terminal state.
)

// Enum value maps for ReadState.
var (
	ReadState_name = map[int32]string{
		1:   "READ_STATE_UNKNOWN",
		2:   "READ_STATE_READ",
		3:   "READ_STATE_READ_COMPLETE",
		4:   "READ_STATE_DO_CALLBACK",
		5:   "READ_STATE_HANDLE_ERROR",
		100: "READ_STATE_ERROR",
	}
	ReadState_value = map[string]int32{
		"READ_STATE_UNKNOWN":       1,
		"READ_STATE_READ":          2,
		"READ_STATE_READ_COMPLETE": 3,
		"READ_STATE_DO_CALLBACK":   4,
		"READ_STATE_HANDLE_ERROR":  5,
		"READ_STATE_ERROR":         100,
	}
)

func (x ReadState) Enum() *ReadState {
	p := new(ReadState)
	*p = x
	return p
}

func (x ReadState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_domain_chromecast_proto_logging_proto_enumTypes[4].Descriptor()
}

func (ReadState) Type() protoreflect.EnumType {
	return &file_pkg_domain_chromecast_proto_logging_proto_enumTypes[4]
}

func (x ReadState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReadState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReadState(num)
	return nil
}

// Deprecated: Use ReadState.Descriptor instead.
func (ReadState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_domain_chromecast_proto_logging_proto_rawDescGZIP(), []int{4}
}

type WriteState int32

const (
	WriteState_WRITE_STATE_UNKNOWN        WriteState = 1
	WriteState_WRITE_STATE_WRITE          WriteState = 2
	WriteState_WRITE_STATE_WRITE_COMPLETE WriteState = 3
	WriteState_WRITE_STATE_DO_CALLBACK    WriteState = 4
	WriteState_WRITE_STATE_HANDLE_ERROR   WriteState = 5
	// Terminal states follow.
	WriteState_WRITE_STATE_ERROR WriteState = 100
	WriteState_WRITE_STATE_IDLE  WriteState = 101
)

// Enum value maps for WriteState.
var (
	WriteState_name = map[int32]string{
		1:   "WRITE_STATE_UNKNOWN",
		2:   "WRITE_STATE_WRITE",
		3:   "WRITE_STATE_WRITE_COMPLETE",
		4:   "WRITE_STATE_DO_CALLBACK",
		5:   "WRITE_STATE_HANDLE_ERROR",
		100: "WRITE_STATE_ERROR",
		101: "WRITE_STATE_IDLE",
	}
	WriteState_value = map[string]int32{
		"WRITE_STATE_UNKNOWN":        1,
		"WRITE_STATE_WRITE":          2,
		"WRITE_STATE_WRITE_COMPLETE": 3,
		"WRITE_STATE_DO_CALLBACK":    4,
		"WRITE_STATE_HANDLE_ERROR":   5,
		"WRITE_STATE_ERROR":          100,
		"WRITE_STATE_IDLE":           101,
	}
)

func (x WriteState) Enum() *WriteState {
	p := new(WriteState)
	*p = x
	return p
}

func (x WriteState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WriteState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_domain_chromecast_proto_logging_proto_enumTypes[5].Descriptor()
}

func (WriteState) Type() protoreflect.EnumType {
	return &file_pkg_domain_chromecast_proto_logging_proto_enumTypes[5]
}

func (x WriteState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WriteState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WriteState(num)
	return nil
}

// Deprecated: Use WriteState.Descriptor instead.
func (WriteState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_domain_chromecast_proto_logging_proto_rawDescGZIP(), []int{5}
}

type ErrorState int32

const (
	ErrorState_CHANNEL_ERROR_NONE                 ErrorState = 1
	ErrorState_CHANNEL_ERROR_CHANNEL_NOT_OPEN     ErrorState = 2
	ErrorState_CHANNEL_ERROR_AUTHENTICATION_ERROR ErrorState = 3
	ErrorState_CHANNEL_ERROR_CONNECT_ERROR        ErrorState = 4
	ErrorState_CHANNEL_ERROR_SOCKET_ERROR         ErrorState = 5
	ErrorState_CHANNEL_ERROR_TRANSPORT_ERROR      ErrorState = 6
	ErrorState_CHANNEL_ERROR_INVALID_MESSAGE      ErrorState = 7
	ErrorState_CHANNEL_ERROR_INVALID_CHANNEL_ID   ErrorState = 8
	ErrorState_CHANNEL_ERROR_CONNECT_TIMEOUT      ErrorState = 9
	ErrorState_CHANNEL_ERROR_UNKNOWN              ErrorState = 10
)

// Enum value maps for ErrorState.
var (
	ErrorState_name = map[int32]string{
		1:  "CHANNEL_ERROR_NONE",
		2:  "CHANNEL_ERROR_CHANNEL_NOT_OPEN",
		3:  "CHANNEL_ERROR_AUTHENTICATION_ERROR",
		4:  "CHANNEL_ERROR_CONNECT_ERROR",
		5:  "CHANNEL_ERROR_SOCKET_ERROR",
		6:  "CHANNEL_ERROR_TRANSPORT_ERROR",
		7:  "CHANNEL_ERROR_INVALID_MESSAGE",
		8:  "CHANNEL_ERROR_INVALID_CHANNEL_ID",
		9:  "CHANNEL_ERROR_CONNECT_TIMEOUT",
		10: "CHANNEL_ERROR_UNKNOWN",
	}
	ErrorState_value = map[string]int32{
		"CHANNEL_ERROR_NONE":                 1,
		"CHANNEL_ERROR_CHANNEL_NOT_OPEN":     2,
		"CHANNEL_ERROR_AUTHENTICATION_ERROR": 3,
		"CHANNEL_ERROR_CONNECT_ERROR":        4,
		"CHANNEL_ERROR_SOCKET_ERROR":         5,
		"CHANNEL_ERROR_TRANSPORT_ERROR":      6,
		"CHANNEL_ERROR_INVALID_MESSAGE":      7,
		"CHANNEL_ERROR_INVALID_CHANNEL_ID":   8,
		"CHANNEL_ERROR_CONNECT_TIMEOUT":      9,
		"CHANNEL_ERROR_UNKNOWN":              10,
	}
)

func (x ErrorState) Enum() *ErrorState {
	p := new(ErrorState)
	*p = x
	return p
}

func (x ErrorState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_domain_chromecast_proto_logging_proto_enumTypes[6].Descriptor()
}

func (ErrorState) Type() protoreflect.EnumType {
	return &file_pkg_domain_chromecast_proto_logging_proto_enumTypes[6]
}

func (x ErrorState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ErrorState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ErrorState(num)
	return nil
}

// Deprecated: Use ErrorState.Descriptor instead.
func (ErrorState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_domain_chromecast_proto_logging_proto_rawDescGZIP(), []int{6}
}

type ChallengeReplyErrorType int32

const (
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_NONE                                ChallengeReplyErrorType = 1
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_PEER_CERT_EMPTY                     ChallengeReplyErrorType = 2
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_WRONG_PAYLOAD_TYPE                  ChallengeReplyErrorType = 3
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_NO_PAYLOAD                          ChallengeReplyErrorType = 4
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_PAYLOAD_PARSING_FAILED              ChallengeReplyErrorType = 5
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_MESSAGE_ERROR                       ChallengeReplyErrorType = 6
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_NO_RESPONSE                         ChallengeReplyErrorType = 7
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_FINGERPRINT_NOT_FOUND               ChallengeReplyErrorType = 8
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_CERT_PARSING_FAILED                 ChallengeReplyErrorType = 9
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_CERT_NOT_SIGNED_BY_TRUSTED_CA       ChallengeReplyErrorType = 10
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_CANNOT_EXTRACT_PUBLIC_KEY           ChallengeReplyErrorType = 11
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_SIGNED_BLOBS_MISMATCH               ChallengeReplyErrorType = 12
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_TLS_CERT_VALIDITY_PERIOD_TOO_LONG   ChallengeReplyErrorType = 13
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_TLS_CERT_VALID_START_DATE_IN_FUTURE ChallengeReplyErrorType = 14
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_TLS_CERT_EXPIRED                    ChallengeReplyErrorType = 15
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_CRL_INVALID                         ChallengeReplyErrorType = 16
	ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_CERT_REVOKED                        ChallengeReplyErrorType = 17
)

// Enum value maps for ChallengeReplyErrorType.
var (
	ChallengeReplyErrorType_name = map[int32]string{
		1:  "CHALLENGE_REPLY_ERROR_NONE",
		2:  "CHALLENGE_REPLY_ERROR_PEER_CERT_EMPTY",
		3:  "CHALLENGE_REPLY_ERROR_WRONG_PAYLOAD_TYPE",
		4:  "CHALLENGE_REPLY_ERROR_NO_PAYLOAD",
		5:  "CHALLENGE_REPLY_ERROR_PAYLOAD_PARSING_FAILED",
		6:  "CHALLENGE_REPLY_ERROR_MESSAGE_ERROR",
		7:  "CHALLENGE_REPLY_ERROR_NO_RESPONSE",
		8:  "CHALLENGE_REPLY_ERROR_FINGERPRINT_NOT_FOUND",
		9:  "CHALLENGE_REPLY_ERROR_CERT_PARSING_FAILED",
		10: "CHALLENGE_REPLY_ERROR_CERT_NOT_SIGNED_BY_TRUSTED_CA",
		11: "CHALLENGE_REPLY_ERROR_CANNOT_EXTRACT_PUBLIC_KEY",
		12: "CHALLENGE_REPLY_ERROR_SIGNED_BLOBS_MISMATCH",
		13: "CHALLENGE_REPLY_ERROR_TLS_CERT_VALIDITY_PERIOD_TOO_LONG",
		14: "CHALLENGE_REPLY_ERROR_TLS_CERT_VALID_START_DATE_IN_FUTURE",
		15: "CHALLENGE_REPLY_ERROR_TLS_CERT_EXPIRED",
		16: "CHALLENGE_REPLY_ERROR_CRL_INVALID",
		17: "CHALLENGE_REPLY_ERROR_CERT_REVOKED",
	}
	ChallengeReplyErrorType_value = map[string]int32{
		"CHALLENGE_REPLY_ERROR_NONE":                                1,
		"CHALLENGE_REPLY_ERROR_PEER_CERT_EMPTY":                     2,
		"CHALLENGE_REPLY_ERROR_WRONG_PAYLOAD_TYPE":                  3,
		"CHALLENGE_REPLY_ERROR_NO_PAYLOAD":                          4,
		"CHALLENGE_REPLY_ERROR_PAYLOAD_PARSING_FAILED":              5,
		"CHALLENGE_REPLY_ERROR_MESSAGE_ERROR":                       6,
		"CHALLENGE_REPLY_ERROR_NO_RESPONSE":                         7,
		"CHALLENGE_REPLY_ERROR_FINGERPRINT_NOT_FOUND":               8,
		"CHALLENGE_REPLY_ERROR_CERT_PARSING_FAILED":                 9,
		"CHALLENGE_REPLY_ERROR_CERT_NOT_SIGNED_BY_TRUSTED_CA":       10,
		"CHALLENGE_REPLY_ERROR_CANNOT_EXTRACT_PUBLIC_KEY":           11,
		"CHALLENGE_REPLY_ERROR_SIGNED_BLOBS_MISMATCH":               12,
		"CHALLENGE_REPLY_ERROR_TLS_CERT_VALIDITY_PERIOD_TOO_LONG":   13,
		"CHALLENGE_REPLY_ERROR_TLS_CERT_VALID_START_DATE_IN_FUTURE": 14,
		"CHALLENGE_REPLY_ERROR_TLS_CERT_EXPIRED":                    15,
		"CHALLENGE_REPLY_ERROR_CRL_INVALID":                         16,
		"CHALLENGE_REPLY_ERROR_CERT_REVOKED":                        17,
	}
)

func (x ChallengeReplyErrorType) Enum() *ChallengeReplyErrorType {
	p := new(ChallengeReplyErrorType)
	*p = x
	return p
}

func (x ChallengeReplyErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeReplyErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_domain_chromecast_proto_logging_proto_enumTypes[7].Descriptor()
}

func (ChallengeReplyErrorType) Type() protoreflect.EnumType {
	return &file_pkg_domain_chromecast_proto_logging_proto_enumTypes[7]
}

func (x ChallengeReplyErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChallengeReplyErrorType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChallengeReplyErrorType(num)
	return nil
}

// Deprecated: Use ChallengeReplyErrorType.Descriptor instead.
func (ChallengeReplyErrorType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_domain_chromecast_proto_logging_proto_rawDescGZIP(), []int{7}
}

type SocketEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	Type                    *EventType               `protobuf:"varint,1,opt,name=type,enum=extensions.api.cast_channel.proto.EventType" json:"type,omitempty"`
	TimestampMicros         *int64                   `protobuf:"varint,2,opt,name=timestamp_micros,json=timestampMicros" json:"timestamp_micros,omitempty"`
	Details                 *string                  `protobuf:"bytes,3,opt,name=details" json:"details,omitempty"`
	NetReturnValue          *int32                   `protobuf:"varint,4,opt,name=net_return_value,json=netReturnValue" json:"net_return_value,omitempty"`
	MessageNamespace        *string                  `protobuf:"bytes,5,opt,name=message_namespace,json=messageNamespace" json:"message_namespace,omitempty"`
	ReadyState              *ReadyState              `protobuf:"varint,6,opt,name=ready_state,json=readyState,enum=extensions.api.cast_channel.proto.ReadyState" json:"ready_state,omitempty"`
	ConnectionState         *ConnectionState         `protobuf:"varint,7,opt,name=connection_state,json=connectionState,enum=extensions.api.cast_channel.proto.ConnectionState" json:"connection_state,omitempty"`
	ReadState               *ReadState               `protobuf:"varint,8,opt,name=read_state,json=readState,enum=extensions.api.cast_channel.proto.ReadState" json:"read_state,omitempty"`
	WriteState              *WriteState              `protobuf:"varint,9,opt,name=write_state,json=writeState,enum=extensions.api.cast_channel.proto.WriteState" json:"write_state,omitempty"`
	ErrorState              *ErrorState              `protobuf:"varint,10,opt,name=error_state,json=errorState,enum=extensions.api.cast_channel.proto.ErrorState" json:"error_state,omitempty"`
	ChallengeReplyErrorType *ChallengeReplyErrorType `protobuf:"varint,11,opt,name=challenge_reply_error_type,json=challengeReplyErrorType,enum=extensions.api.cast_channel.proto.ChallengeReplyErrorType" json:"challenge_reply_error_type,omitempty"`
	// No longer used.
	NssErrorCode *int32 `protobuf:"varint,12,opt,name=nss_error_code,json=nssErrorCode" json:"nss_error_code,omitempty"`
}

func (x *SocketEvent) Reset() {
	*x = SocketEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_domain_chromecast_proto_logging_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocketEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketEvent) ProtoMessage() {}

func (x *SocketEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_domain_chromecast_proto_logging_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketEvent.ProtoReflect.Descriptor instead.
func (*SocketEvent) Descriptor() ([]byte, []int) {
	return file_pkg_domain_chromecast_proto_logging_proto_rawDescGZIP(), []int{0}
}

func (x *SocketEvent) GetType() EventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EventType_EVENT_TYPE_UNKNOWN
}

func (x *SocketEvent) GetTimestampMicros() int64 {
	if x != nil && x.TimestampMicros != nil {
		return *x.TimestampMicros
	}
	return 0
}

func (x *SocketEvent) GetDetails() string {
	if x != nil && x.Details != nil {
		return *x.Details
	}
	return ""
}

func (x *SocketEvent) GetNetReturnValue() int32 {
	if x != nil && x.NetReturnValue != nil {
		return *x.NetReturnValue
	}
	return 0
}

func (x *SocketEvent) GetMessageNamespace() string {
	if x != nil && x.MessageNamespace != nil {
		return *x.MessageNamespace
	}
	return ""
}

func (x *SocketEvent) GetReadyState() ReadyState {
	if x != nil && x.ReadyState != nil {
		return *x.ReadyState
	}
	return ReadyState_READY_STATE_NONE
}

func (x *SocketEvent) GetConnectionState() ConnectionState {
	if x != nil && x.ConnectionState != nil {
		return *x.ConnectionState
	}
	return ConnectionState_CONN_STATE_UNKNOWN
}

func (x *SocketEvent) GetReadState() ReadState {
	if x != nil && x.ReadState != nil {
		return *x.ReadState
	}
	return ReadState_READ_STATE_UNKNOWN
}

func (x *SocketEvent) GetWriteState() WriteState {
	if x != nil && x.WriteState != nil {
		return *x.WriteState
	}
	return WriteState_WRITE_STATE_UNKNOWN
}

func (x *SocketEvent) GetErrorState() ErrorState {
	if x != nil && x.ErrorState != nil {
		return *x.ErrorState
	}
	return ErrorState_CHANNEL_ERROR_NONE
}

func (x *SocketEvent) GetChallengeReplyErrorType() ChallengeReplyErrorType {
	if x != nil && x.ChallengeReplyErrorType != nil {
		return *x.ChallengeReplyErrorType
	}
	return ChallengeReplyErrorType_CHALLENGE_REPLY_ERROR_NONE
}

func (x *SocketEvent) GetNssErrorCode() int32 {
	if x != nil && x.NssErrorCode != nil {
		return *x.NssErrorCode
	}
	return 0
}

type AggregatedSocketEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *int32         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	EndpointId      *int32         `protobuf:"varint,2,opt,name=endpoint_id,json=endpointId" json:"endpoint_id,omitempty"`
	ChannelAuthType *ChannelAuth   `protobuf:"varint,3,opt,name=channel_auth_type,json=channelAuthType,enum=extensions.api.cast_channel.proto.ChannelAuth" json:"channel_auth_type,omitempty"`
	SocketEvent     []*SocketEvent `protobuf:"bytes,4,rep,name=socket_event,json=socketEvent" json:"socket_event,omitempty"`
	BytesRead       *int64         `protobuf:"varint,5,opt,name=bytes_read,json=bytesRead" json:"bytes_read,omitempty"`
	BytesWritten    *int64         `protobuf:"varint,6,opt,name=bytes_written,json=bytesWritten" json:"bytes_written,omitempty"`
}

func (x *AggregatedSocketEvent) Reset() {
	*x = AggregatedSocketEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_domain_chromecast_proto_logging_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedSocketEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedSocketEvent) ProtoMessage() {}

func (x *AggregatedSocketEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_domain_chromecast_proto_logging_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedSocketEvent.ProtoReflect.Descriptor instead.
func (*AggregatedSocketEvent) Descriptor() ([]byte, []int) {
	return file_pkg_domain_chromecast_proto_logging_proto_rawDescGZIP(), []int{1}
}

func (x *AggregatedSocketEvent) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AggregatedSocketEvent) GetEndpointId() int32 {
	if x != nil && x.EndpointId != nil {
		return *x.EndpointId
	}
	return 0
}

func (x *AggregatedSocketEvent) GetChannelAuthType() ChannelAuth {
	if x != nil && x.ChannelAuthType != nil {
		return *x.ChannelAuthType
	}
	return ChannelAuth_SSL
}

func (x *AggregatedSocketEvent) GetSocketEvent() []*SocketEvent {
	if x != nil {
		return x.SocketEvent
	}
	return nil
}

func (x *AggregatedSocketEvent) GetBytesRead() int64 {
	if x != nil && x.BytesRead != nil {
		return *x.BytesRead
	}
	return 0
}

func (x *AggregatedSocketEvent) GetBytesWritten() int64 {
	if x != nil && x.BytesWritten != nil {
		return *x.BytesWritten
	}
	return 0
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each AggregatedSocketEvent represents events recorded for a socket.
	AggregatedSocketEvent []*AggregatedSocketEvent `protobuf:"bytes,1,rep,name=aggregated_socket_event,json=aggregatedSocketEvent" json:"aggregated_socket_event,omitempty"`
	// Number of socket log entries evicted by the logger due to size constraints.
	NumEvictedAggregatedSocketEvents *int32 `protobuf:"varint,2,opt,name=num_evicted_aggregated_socket_events,json=numEvictedAggregatedSocketEvents" json:"num_evicted_aggregated_socket_events,omitempty"`
	// Number of event log entries evicted by the logger due to size constraints.
	NumEvictedSocketEvents *int32 `protobuf:"varint,3,opt,name=num_evicted_socket_events,json=numEvictedSocketEvents" json:"num_evicted_socket_events,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_domain_chromecast_proto_logging_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_domain_chromecast_proto_logging_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_pkg_domain_chromecast_proto_logging_proto_rawDescGZIP(), []int{2}
}

func (x *Log) GetAggregatedSocketEvent() []*AggregatedSocketEvent {
	if x != nil {
		return x.AggregatedSocketEvent
	}
	return nil
}

func (x *Log) GetNumEvictedAggregatedSocketEvents() int32 {
	if x != nil && x.NumEvictedAggregatedSocketEvents != nil {
		return *x.NumEvictedAggregatedSocketEvents
	}
	return 0
}

func (x *Log) GetNumEvictedSocketEvents() int32 {
	if x != nil && x.NumEvictedSocketEvents != nil {
		return *x.NumEvictedSocketEvents
	}
	return 0
}

var File_pkg_domain_chromecast_proto_logging_proto protoreflect.FileDescriptor

var file_pkg_domain_chromecast_proto_logging_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6,
	0x06, 0x0a, 0x0b, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x40,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0b,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x77, 0x0a, 0x1a, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x17, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x73, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x73, 0x73, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbb, 0x02, 0x0a, 0x15, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x5a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x52, 0x0f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51,
	0x0a, 0x0c, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x22, 0x82, 0x02, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x70, 0x0a,
	0x17, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x4e, 0x0a, 0x24, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x6e,
	0x75, 0x6d, 0x45, 0x76, 0x69, 0x63, 0x74, 0x65, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x39, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x69, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0xc0, 0x06, 0x0a, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x43, 0x50, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x43, 0x50, 0x5f, 0x53, 0x4f,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x41, 0x4c,
	0x49, 0x56, 0x45, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x53, 0x4c, 0x5f, 0x43, 0x45, 0x52,
	0x54, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x53, 0x4c, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x4f, 0x42, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x1b,
	0x0a, 0x17, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x44, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x5f, 0x4f, 0x42, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45,
	0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45,
	0x4e, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x54, 0x45, 0x4e, 0x10, 0x14,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10,
	0x15, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x44, 0x10, 0x19, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x53, 0x4c, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x49, 0x46,
	0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x1a, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x44, 0x10, 0x1b, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x43, 0x50, 0x5f, 0x53, 0x4f, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x1c, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x1d, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x4f,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x1e, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x1f, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x48,
	0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x20, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x49, 0x4e, 0x47, 0x5f,
	0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x21, 0x2a, 0x28, 0x0a,
	0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x53, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x53, 0x4c, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x85, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x05, 0x2a,
	0x8f, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x4f, 0x4e, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10,
	0x06, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x07, 0x12, 0x2c,
	0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f,
	0x4e, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45,
	0x44, 0x10, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x66, 0x2a, 0xa5, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x64, 0x2a, 0xc4, 0x01, 0x0a, 0x0a, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x65,
	0x2a, 0xdb, 0x02, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x08,
	0x12, 0x21, 0x0a, 0x1d, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0a, 0x2a, 0xb0,
	0x06, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48,
	0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x48,
	0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x45, 0x4d,
	0x50, 0x54, 0x59, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x57,
	0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f,
	0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x49,
	0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x43,
	0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x07, 0x12, 0x2f, 0x0a, 0x2b, 0x43,
	0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x2d, 0x0a, 0x29,
	0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x49,
	0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12, 0x37, 0x0a, 0x33, 0x43,
	0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x5f,
	0x43, 0x41, 0x10, 0x0a, 0x12, 0x33, 0x0a, 0x2f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41,
	0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x0b, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x53, 0x5f,
	0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0c, 0x12, 0x3b, 0x0a, 0x37, 0x43, 0x48,
	0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x54, 0x4c, 0x53, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x0d, 0x12, 0x3d, 0x0a, 0x39, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x54, 0x4c, 0x53, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x55,
	0x54, 0x55, 0x52, 0x45, 0x10, 0x0e, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x54, 0x4c, 0x53, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x0f, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x52, 0x4c, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10,
	0x11, 0x42, 0x27, 0x48, 0x03, 0x5a, 0x23, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
}

var (
	file_pkg_domain_chromecast_proto_logging_proto_rawDescOnce sync.Once
	file_pkg_domain_chromecast_proto_logging_proto_rawDescData = file_pkg_domain_chromecast_proto_logging_proto_rawDesc
)

func file_pkg_domain_chromecast_proto_logging_proto_rawDescGZIP() []byte {
	file_pkg_domain_chromecast_proto_logging_proto_rawDescOnce.Do(func() {
		file_pkg_domain_chromecast_proto_logging_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_domain_chromecast_proto_logging_proto_rawDescData)
	})
	return file_pkg_domain_chromecast_proto_logging_proto_rawDescData
}

var file_pkg_domain_chromecast_proto_logging_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_pkg_domain_chromecast_proto_logging_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pkg_domain_chromecast_proto_logging_proto_goTypes = []interface{}{
	(EventType)(0),                // 0: extensions.api.cast_channel.proto.EventType
	(ChannelAuth)(0),              // 1: extensions.api.cast_channel.proto.ChannelAuth
	(ReadyState)(0),               // 2: extensions.api.cast_channel.proto.ReadyState
	(ConnectionState)(0),          // 3: extensions.api.cast_channel.proto.ConnectionState
	(ReadState)(0),                // 4: extensions.api.cast_channel.proto.ReadState
	(WriteState)(0),               // 5: extensions.api.cast_channel.proto.WriteState
	(ErrorState)(0),               // 6: extensions.api.cast_channel.proto.ErrorState
	(ChallengeReplyErrorType)(0),  // 7: extensions.api.cast_channel.proto.ChallengeReplyErrorType
	(*SocketEvent)(nil),           // 8: extensions.api.cast_channel.proto.SocketEvent
	(*AggregatedSocketEvent)(nil), // 9: extensions.api.cast_channel.proto.AggregatedSocketEvent
	(*Log)(nil),                   // 10: extensions.api.cast_channel.proto.Log
}
var file_pkg_domain_chromecast_proto_logging_proto_depIdxs = []int32{
	0,  // 0: extensions.api.cast_channel.proto.SocketEvent.type:type_name -> extensions.api.cast_channel.proto.EventType
	2,  // 1: extensions.api.cast_channel.proto.SocketEvent.ready_state:type_name -> extensions.api.cast_channel.proto.ReadyState
	3,  // 2: extensions.api.cast_channel.proto.SocketEvent.connection_state:type_name -> extensions.api.cast_channel.proto.ConnectionState
	4,  // 3: extensions.api.cast_channel.proto.SocketEvent.read_state:type_name -> extensions.api.cast_channel.proto.ReadState
	5,  // 4: extensions.api.cast_channel.proto.SocketEvent.write_state:type_name -> extensions.api.cast_channel.proto.WriteState
	6,  // 5: extensions.api.cast_channel.proto.SocketEvent.error_state:type_name -> extensions.api.cast_channel.proto.ErrorState
	7,  // 6: extensions.api.cast_channel.proto.SocketEvent.challenge_reply_error_type:type_name -> extensions.api.cast_channel.proto.ChallengeReplyErrorType
	1,  // 7: extensions.api.cast_channel.proto.AggregatedSocketEvent.channel_auth_type:type_name -> extensions.api.cast_channel.proto.ChannelAuth
	8,  // 8: extensions.api.cast_channel.proto.AggregatedSocketEvent.socket_event:type_name -> extensions.api.cast_channel.proto.SocketEvent
	9,  // 9: extensions.api.cast_channel.proto.Log.aggregated_socket_event:type_name -> extensions.api.cast_channel.proto.AggregatedSocketEvent
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_pkg_domain_chromecast_proto_logging_proto_init() }
func file_pkg_domain_chromecast_proto_logging_proto_init() {
	if File_pkg_domain_chromecast_proto_logging_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_domain_chromecast_proto_logging_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocketEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_domain_chromecast_proto_logging_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedSocketEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_domain_chromecast_proto_logging_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_domain_chromecast_proto_logging_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_domain_chromecast_proto_logging_proto_goTypes,
		DependencyIndexes: file_pkg_domain_chromecast_proto_logging_proto_depIdxs,
		EnumInfos:         file_pkg_domain_chromecast_proto_logging_proto_enumTypes,
		MessageInfos:      file_pkg_domain_chromecast_proto_logging_proto_msgTypes,
	}.Build()
	File_pkg_domain_chromecast_proto_logging_proto = out.File
	file_pkg_domain_chromecast_proto_logging_proto_rawDesc = nil
	file_pkg_domain_chromecast_proto_logging_proto_goTypes = nil
	file_pkg_domain_chromecast_proto_logging_proto_depIdxs = nil
}
